$date
	Thu Jun 15 15:24:09 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module carry_look_ahead_16bit_tb $end
$scope module uut $end
$var wire 16 ! a [15:0] $end
$var wire 16 " b [15:0] $end
$var wire 1 # c1 $end
$var wire 1 $ c2 $end
$var wire 1 % c3 $end
$var wire 1 & cin $end
$var wire 1 ' cout $end
$var wire 16 ( sum [15:0] $end
$scope module cla1 $end
$var wire 4 ) a [3:0] $end
$var wire 4 * b [3:0] $end
$var wire 4 + c [3:0] $end
$var wire 1 & cin $end
$var wire 1 # cout $end
$var wire 4 , g [3:0] $end
$var wire 4 - p [3:0] $end
$var wire 4 . sum [3:0] $end
$upscope $end
$scope module cla2 $end
$var wire 4 / a [3:0] $end
$var wire 4 0 b [3:0] $end
$var wire 4 1 c [3:0] $end
$var wire 1 # cin $end
$var wire 1 $ cout $end
$var wire 4 2 g [3:0] $end
$var wire 4 3 p [3:0] $end
$var wire 4 4 sum [3:0] $end
$upscope $end
$scope module cla3 $end
$var wire 4 5 a [3:0] $end
$var wire 4 6 b [3:0] $end
$var wire 4 7 c [3:0] $end
$var wire 1 $ cin $end
$var wire 1 % cout $end
$var wire 4 8 g [3:0] $end
$var wire 4 9 p [3:0] $end
$var wire 4 : sum [3:0] $end
$upscope $end
$scope module cla4 $end
$var wire 4 ; a [3:0] $end
$var wire 4 < b [3:0] $end
$var wire 4 = c [3:0] $end
$var wire 1 % cin $end
$var wire 1 ' cout $end
$var wire 4 > g [3:0] $end
$var wire 4 ? p [3:0] $end
$var wire 4 @ sum [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
0'
0&
0%
0$
0#
b0 "
b0 !
$end
#10000
b1111 .
b1111 4
b1111 :
b1111 @
b1111111111111111 (
b1111 -
b1111 3
b1111 9
b1111 ?
b1111 )
b1111 /
b1111 5
b1111 ;
b1111111111111111 !
#20000
b1111 *
b1111 0
b1111 6
b1111 <
b0 )
b0 /
b0 5
b0 ;
b1111111111111111 "
b0 !
#30000
1#
1$
1%
1'
b1110 +
b1111 1
b1111 7
b1111 =
b1110 .
b1111 4
b1111 :
b1111 @
b1111111111111110 (
b0 -
b1111 ,
b0 3
b1111 2
b0 9
b1111 8
b0 ?
b1111 >
b1111 )
b1111 /
b1111 5
b1111 ;
b1111111111111111 !
#40000
0#
0$
0%
0'
b0 4
b0 :
b0 @
b0 +
b0 1
b0 7
b0 =
b1010 .
b1010 (
b1010 -
b0 ,
b0 2
b0 8
b0 >
b1010 *
b0 0
b0 6
b0 <
b0 )
b0 /
b0 5
b0 ;
b1010 "
b0 !
#50000
b1011 .
b1011 (
b1011 -
b1 )
b1 !
#60000
b100 +
b1100 .
b1100 (
b1000 -
b10 ,
b10 )
b10 !
#70000
b1101 .
b1101 (
b1001 -
b11 )
b11 !
#80000
b0 +
b1110 .
b1110 (
b1110 -
b0 ,
b100 )
b100 !
#90000
b1111 .
b1111 (
b1111 -
b101 )
b101 !
#100000
b1 4
b1 1
1#
b1100 +
b0 .
b10000 (
b1100 -
b10 ,
b110 )
b110 !
#110000
b1 .
b10001 (
b1101 -
b111 )
b111 !
#120000
b0 +
b10 .
b10010 (
b10 -
b1000 ,
b1000 )
b1000 !
#130000
b11 .
b10011 (
b11 -
b1001 )
b1001 !
#140000
b100 +
b100 .
b10100 (
b0 -
b1010 ,
b1010 )
b1010 !
#150000
b101 .
b10101 (
b1 -
b1011 )
b1011 !
#160000
b0 +
b110 .
b10110 (
b110 -
b1000 ,
b1100 )
b1100 !
#170000
b111 .
b10111 (
b111 -
b1101 )
b1101 !
#180000
b1100 +
b1000 .
b11000 (
b100 -
b1010 ,
b1110 )
b1110 !
#190000
b1001 .
b11001 (
b101 -
b1111 )
b1111 !
#200000
b0 4
b0 1
0#
b0 +
b1010 .
b1010 (
b1010 -
b0 ,
b0 *
b1010 )
b0 "
b1010 !
#210000
b1011 .
b1011 (
b1011 -
b1 *
b1 "
#220000
b100 +
b1100 .
b1100 (
b1000 -
b10 ,
b10 *
b10 "
#230000
b1101 .
b1101 (
b1001 -
b11 *
b11 "
#240000
b0 +
b1110 .
b1110 (
b1110 -
b0 ,
b100 *
b100 "
#250000
b1111 .
b1111 (
b1111 -
b101 *
b101 "
#260000
b1 4
b1 1
1#
b1100 +
b0 .
b10000 (
b1100 -
b10 ,
b110 *
b110 "
#270000
b1 .
b10001 (
b1101 -
b111 *
b111 "
#280000
b0 +
b10 .
b10010 (
b10 -
b1000 ,
b1000 *
b1000 "
#290000
b11 .
b10011 (
b11 -
b1001 *
b1001 "
#300000
b100 +
b100 .
b10100 (
b0 -
b1010 ,
b1010 *
b1010 "
#310000
b101 .
b10101 (
b1 -
b1011 *
b1011 "
#320000
b0 +
b110 .
b10110 (
b110 -
b1000 ,
b1100 *
b1100 "
#330000
b111 .
b10111 (
b111 -
b1101 *
b1101 "
#340000
b1100 +
b1000 .
b11000 (
b100 -
b1010 ,
b1110 *
b1110 "
#350000
b1001 .
b11001 (
b101 -
b1111 *
b1111 "
#360000
b0 4
b0 1
0#
b0 +
b0 .
b0 (
b0 -
b0 ,
b0 *
b0 )
b0 "
b0 !
#370000
b10 .
b10 (
b10 +
b1 ,
b1 *
b1 )
b1 "
b1 !
#380000
b100 .
b100 (
b100 +
b10 ,
b10 *
b10 )
b10 "
b10 !
#390000
b110 .
b110 (
b110 +
b11 ,
b11 *
b11 )
b11 "
b11 !
#400000
b1000 .
b1000 (
b1000 +
b100 ,
b100 *
b100 )
b100 "
b100 !
#410000
b1010 .
b1010 (
b1010 +
b101 ,
b101 *
b101 )
b101 "
b101 !
#420000
b1100 .
b1100 (
b1100 +
b110 ,
b110 *
b110 )
b110 "
b110 !
#430000
b1110 .
b1110 (
b1110 +
b111 ,
b111 *
b111 )
b111 "
b111 !
#440000
b1 4
b1 1
1#
b0 .
b10000 (
b0 +
b1000 ,
b1000 *
b1000 )
b1000 "
b1000 !
#450000
b10 .
b10010 (
b10 +
b1001 ,
b1001 *
b1001 )
b1001 "
b1001 !
#460000
b100 .
b10100 (
b100 +
b1010 ,
b1010 *
b1010 )
b1010 "
b1010 !
#470000
b110 .
b10110 (
b110 +
b1011 ,
b1011 *
b1011 )
b1011 "
b1011 !
#480000
b1000 .
b11000 (
b1000 +
b1100 ,
b1100 *
b1100 )
b1100 "
b1100 !
#490000
b1010 .
b11010 (
b1010 +
b1101 ,
b1101 *
b1101 )
b1101 "
b1101 !
#500000
b1100 .
b11100 (
b1100 +
b1110 ,
b1110 *
b1110 )
b1110 "
b1110 !
#510000
b1110 .
b11110 (
b1110 +
b1111 ,
b1111 *
b1111 )
b1111 "
b1111 !
#520000
